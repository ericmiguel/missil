[project]
name = "missil"
version = "0.1.5b"
description = "Simple FastAPI declarative endpoint-level access control."
authors = [{ name = "Eric Miguel", email = "eric.mrib@gmail.com" }]
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 1",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP",
]
dependencies = ["fastapi>=0.104.1", "python-jose[cryptography]>=3.3.0"]
requires-python = ">=3.10"
readme = "README.md"
license = { text = "MIT" }

[tool.mypy]
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
show_error_codes = true
warn_return_any = true

[[tool.mypy.overrides]]
module = []
ignore_missing_imports = true

[tool.isort]
profile = "black"
force_single_line = true
atomic = true
include_trailing_comma = true
lines_after_imports = 2
lines_between_types = 1
use_parentheses = true
filter_files = true

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(message)s"
log_file = "pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

[tool.flake8]
max-line-length = 88
max-complexity = 10
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
]
ignore = [ # alertas e erros por conta do black
    "E501", # linha longa
    "E203", # espaço antes de ':'
    "E225", # sem espaço ao redor de operadores 
    "W503", # quebra de linha antes de um operador binário
    "W504", # quebra de linha após um operador binário line
]

[tool.pydocstyle]
convention = "numpy"
add-ignore = "D401"
match = '(?!test_|tests).*\.py' # ignora arquivos python contendo "test_" ou "tests"
match-dir = "[^\tests|.].*"     # ignora diretórios iniciados com "." ou "tests"[build-system]


[tool.pdm.dev-dependencies]
python-tools = [
    "mypy>=1.4.1",
    "isort>=5.12.0",
    "black>=23.11.0",
    "pydocstyle>=6.3.0",
    "autoflake>=2.2.0",
    "Flake8-pyproject>=1.2.3",
    "pyupgrade>=3.10.1",
    "refurb>=1.18.0",
    "pre-commit>=3.4.0",
]
testing = [
    "pytest>=7.4.4",
    "pytest-cov>=4.1.0",
    "pytest-cookies>=0.7.0",
    "httpx>=0.26.0",
]
dev = [
    "uvicorn>=0.26.0",
    "types-python-jose>=3.3.4.20240106",
    "pre-commit>=3.6.0",
]
docs = [
    "mkdocs-material>=9.5.4",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs>=1.5.3",
    "termynal>=0.11.1",
]

[tool.pdm.scripts]
autoflake = { cmd = [
    "autoflake",
    "--remove-all-unused-imports",
    "--recursive",
    "--remove-unused-variables",
    "--in-place",
    "missil",
    "sample",
    "tests",
] }

flake8 = { cmd = ["flake8", "missil", "sample", "tests"] }
black = { cmd = ["black", "missil", "sample", "tests"] }
isort = { cmd = ["isort", "missil", "sample", "tests"] }
mypy = { cmd = ["mypy", "missil", "sample"] }
refurb = { cmd = ["refurb", "missil", "sample", "tests"] }
pyupgrade = { cmd = [
    "pyupgrade",
    "missil/__init__.py",
    "missil/bearers.py",
    "missil/exceptions.py",
    "missil/jwt_utilities.py",
    "sample/main.py",
    "--py310-plus",
    "--py311-plus",
    "--py312-plus",
] }
pydocstyle = { cmd = ["pydocstyle", "missil", "sample"] }
improve = { composite = ["flake8", "pyupgrade", "refurb"] }
format = { composite = ["autoflake", "black", "isort"] }
test = { cmd = ["pytest", "--cov=missil", "tests/"] }
code-quality = { composite = [
    "format",
    "improve",
    "mypy",
    "pydocstyle",
    "test",
] }
pre-commit-test-run = { cmd = ["pre-commit", "run", "--all-files"] }

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"
